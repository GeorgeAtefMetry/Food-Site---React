{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Food App\\\\src\\\\components\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport classes from './Checkout.module.css'; // I wil USE the Ref to get the values once the FORM SUBMITTED **** \n\nimport { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postal: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalInputRef = useRef();\n  const cityInputRef = useRef(); // Here After Creating Ref THEN we connect those to the FORM elements by ref{nameInputRef}\n\n  const isEmpty = value => value.trim() === '';\n\n  const isNotFiveChars = value => value.trim().length !== 5;\n\n  const confirmHandler = event => {\n    event.preventDefault(); // Here We Submit the values\n\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostal = postalInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalIsValid = !isNotFiveChars(enteredPostal);\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      postal: enteredPostalIsValid,\n      city: enteredCityIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalIsValid;\n\n    if (formIsValid) {\n      // If Form Is Not Valid we stop the process\n      return;\n    } // Submit card data\n\n\n    props.onConfirm({\n      name: enteredName,\n      street: enteredStreet,\n      city: enteredCity,\n      postal: enteredPostal\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${formInputsValidity.name ? '' : classes.invalid}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter Valid Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 46\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${formInputsValidity.street ? '' : classes.invalid}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Your Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter Valid Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 48\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${formInputsValidity.postal ? '' : classes.invalid}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), !formInputsValidity.postal && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter Valid Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 48\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${formInputsValidity.city ? '' : classes.invalid}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Enter Valid Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 46\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Checkout, \"G5qE8jBUVZr9tbN6FxEIIpAC+aA=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["D:/Projects/Food App/src/components/Cart/Checkout.js"],"names":["classes","useRef","useState","Checkout","props","formInputsValidity","setFormInputsValidity","name","street","city","postal","nameInputRef","streetInputRef","postalInputRef","cityInputRef","isEmpty","value","trim","isNotFiveChars","length","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostal","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalIsValid","formIsValid","onConfirm","control","invalid","actions","onCancel"],"mappings":"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","sourcesContent":["import classes from './Checkout.module.css'\r\n// I wil USE the Ref to get the values once the FORM SUBMITTED **** \r\nimport { useRef, useState } from 'react'\r\n\r\nconst Checkout = (props) => {\r\n    const [formInputsValidity, setFormInputsValidity] = useState({\r\n        name: true,\r\n        street: true,\r\n        city: true,\r\n        postal: true\r\n    })\r\n\r\n    const nameInputRef = useRef()\r\n    const streetInputRef = useRef()\r\n    const postalInputRef = useRef()\r\n    const cityInputRef = useRef() // Here After Creating Ref THEN we connect those to the FORM elements by ref{nameInputRef}\r\n    \r\n    \r\n    const isEmpty = (value) => value.trim() === ''\r\n    const isNotFiveChars = (value) => value.trim().length !== 5\r\n    \r\n    const confirmHandler = (event) => { \r\n        event.preventDefault()\r\n                // Here We Submit the values\r\n            const enteredName   = nameInputRef.current.value\r\n            const enteredStreet = streetInputRef.current.value\r\n            const enteredPostal = postalInputRef.current.value\r\n            const enteredCity   = cityInputRef.current.value\r\n\r\n            const enteredNameIsValid = !isEmpty(enteredName)\r\n            const enteredStreetIsValid = !isEmpty(enteredStreet)\r\n            const enteredCityIsValid = !isEmpty(enteredCity)\r\n            const enteredPostalIsValid = !isNotFiveChars(enteredPostal)\r\n\r\n            setFormInputsValidity({\r\n                name: enteredNameIsValid,\r\n                street: enteredStreetIsValid,\r\n                postal: enteredPostalIsValid,\r\n                city: enteredCityIsValid\r\n            })\r\n\r\n            const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalIsValid\r\n\r\n            if(formIsValid){\r\n                // If Form Is Not Valid we stop the process\r\n                return                 \r\n            }\r\n            // Submit card data\r\n            props.onConfirm({\r\n                name: enteredName,\r\n                street: enteredStreet,\r\n                city: enteredCity,\r\n                postal: enteredPostal\r\n            })\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={confirmHandler}>\r\n            <div className={`${classes.control} ${formInputsValidity.name ? '' : classes.invalid}`}>\r\n                <label htmlFor='name'>Your Name</label>\r\n                <input type='text' id=\"name\" ref={nameInputRef}></input>\r\n                {!formInputsValidity.name && <p>Please Enter Valid Name</p>}\r\n            </div>\r\n            <div className={`${classes.control} ${formInputsValidity.street ? '' : classes.invalid}`}>\r\n                <label htmlFor='street'>Your Street</label>\r\n                <input type='text' id=\"street\" ref={streetInputRef}></input>\r\n                {!formInputsValidity.street && <p>Please Enter Valid Name</p>}\r\n\r\n            </div>\r\n            <div className={`${classes.control} ${formInputsValidity.postal ? '' : classes.invalid}`}>\r\n                <label htmlFor='postal'>Postal</label>\r\n                <input type='text' id=\"postal\" ref={postalInputRef}></input>\r\n                {!formInputsValidity.postal && <p>Please Enter Valid Name</p>}\r\n\r\n            </div>\r\n            <div className={`${classes.control} ${formInputsValidity.city ? '' : classes.invalid}`}>\r\n                <label htmlFor='city'>City</label>\r\n                <input type='text' id=\"city\" ref={cityInputRef}></input>\r\n                {!formInputsValidity.city && <p>Please Enter Valid Name</p>}\r\n\r\n            </div>\r\n            <div className={classes.actions}>\r\n            <button>Confirm</button>\r\n            <button type='button' onClick={props.onCancel}>Cancel</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Checkout"]},"metadata":{},"sourceType":"module"}